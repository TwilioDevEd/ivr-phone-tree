.chapter(data-title='IVR Phone Tree')
  .step(data-file='config/routes.rb')
    :markdown
      ## About this application

      ![Extra Terrestrial Phone Home
      Service](http://howtodocs.s3.amazonaws.com/logo-et-phone2.png)

      This [Ruby on Rails](http://rubyonrails.org/) sample application is
      modeled after a typical call center experience, but with more [Reese's
      Pieces](https://en.wikipedia.org/wiki/Reese%27s_Pieces#ET:_The_Extra-
      Terrestrial).

      Stranded aliens can call a phone number and receive instructions on how
      to get out of earth safely, or call their home planet
      directly[.](http://bit.ly/asogi) In this tutorial, we'll show you the
      key bits of code to make this work.

      To run this sample app yourself, [download the code and follow the
      instructions on GitHub](https://github.com/TwilioDevEd/ivr-phone-tree-
      rails).

      Let's get started! Click the right arrow above to move to the next step
      of the tutorial.

      ---

      **See Also:**
      * [Getting Started with Ruby on Rails](http://guides.rubyonrails.org/getting_started.html)
      * [Getting started with the Twilio Ruby gem](//twilio-ruby.readthedocs.org/en/latest/index.html#getting-started)

  .step(data-file='config/routes.rb')
    :markdown
      ## Respond to the Phone Call

      To initiate the phone tree, we need to configure one of our Twilio
      numbers to send our web application an HTTP request when we
      get an incoming call.

      [Click on one of your numbers](/user/account/phone-numbers/incoming) and
      configure the Voice URL to point to our server. In our code the route
      will be `/ivr/welcome`.

      ![Configuring a Twilio Number](//s3.amazonaws.com/howtodocs/number-
      config.png)

      ---

      **See Also:**
      * [Configuring Twilio Numbers for Voice](/help/faq/voice/how-do-i-assign-my-twilio-number-to-my-voice-application)
      * [Rails Routing guide](http://guides.rubyonrails.org/routing.html)

  .step(data-file='app/controllers/twilio_controller.rb', data-highlight='11-19')
    :markdown
      ## Respond to the Twilio request with TwiMl

      Our Twilio number is now configured to [send HTTP
      requests](https://www.twilio.com/docs/api/twiml/twilio_request) to this
      controller method on any incoming voice calls. Our app responds with
      [TwiML](https://www.twilio.com/docs/api/twiml) to tell Twilio what to do
      in response to the message.

      In this case we tell Twilio to
      [`Gather`](https://www.twilio.com/docs/api/twiml/gather) the input from
      the caller and we [`Play`](https://www.twilio.com/docs/api/twiml/play) a
      welcome message.

      ---

      **See Also:**
      * [Gather attributes](https://www.twilio.com/docs/api/twiml/gather#attributes)
      * [Play 'loop' attribute](https://www.twilio.com/docs/api/twiml/play#attributes-loop)

  .step(data-file='app/controllers/twilio_controller.rb', data-highlight='14')
    :markdown
      ## Where to send the caller's input

      The *gather's* `action` attribute takes an absolute or relative URL as a
      value. When the caller has finished entering digits Twilio will make a
      GET or POST request to this URL including the
      [`Digits`](https://www.twilio.com/docs/api/twiml/gather#attributes-
      action-parameters) parameter.

      After making this request, Twilio will continue the current call using
      the TwiML received in your response. Any TwiML verbs occuring after a
      <Gather> are unreachable, unless the caller enters no digits.

      ---

      **See Also:**
      * [Twilio Request
        parameters](https://www.twilio.com/docs/api/twiml/twilio_request
        #synchronous-request-parameters)

  .step(data-file='app/controllers/twilio_controller.rb', data-highlight='21-38, 73-88')
    :markdown
      ## The Main Menu: Process the caller's selection

      Our action route will handle processing the caller's input. In this
      case, if our caller chooses '1' for directions, we respond with TwiMl
      that will [`Say`](https://www.twilio.com/docs/api/twiml/say) the
      directions.

      If the caller chooses '2' to call her home planet, then we need to
      gather some more input from her. In this case we have written another
      method that we'll cover in the next step.

      If the caller enters anything else we will respond with a TwiMl
      [`Redirect`](https://www.twilio.com/docs/api/twiml/redirect) to the main
      menu.

      ---

      **See Also:**
      * [Ruby Switch statment](https://www.codecademy.com/glossary/ruby/switch-statement)
      * [The TwiMl Hangup verb](https://www.twilio.com/docs/api/twiml/hangup)
      * [TwiMl Say: Language Options](https://www.twilio.com/docs/api/twiml/say#attributes-alice)

  .step(data-file='app/controllers/twilio_controller.rb', data-highlight='40-69, 90-96')
    :markdown
      ## The Planet Directory: Collect more input from the user

      If at the main menu our caller chooses to call her home planet we will give her the planet directory. This is akin to the typical "company directory" feature of most call centers. 

      Once again we give our `Gather` verb an `action` where we will switch our response based on what the caller chooses. In most instances we are going to [`Dial`](https://www.twilio.com/docs/api/twiml/dial) the appropriate number to connect our caller to her home planet.

  .step
    :markdown
      ## Where to next?

      That's it! We've just implemented an IVR phone tree that will delight
      and serve your customers. If you're a Ruby developer working with
      Twilio, you might want to check out these other tutorials.

      [**Automated Survey**](//www.twilio.com/docs/howto/walkthrough
      /automated-survey/ruby/rails)

      Instantly collect structured data from your users with a survey
      conducted over a voice call or SMS text messages. Learn how to create
      your own survey in Rails.

      [**Click-to-call**](//www.twilio.com/docs/howto/walkthrough/click-to-
      call/ruby/rails)

      Convert web traffic into phone calls with the click of a button.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you think.





